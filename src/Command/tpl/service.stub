<?php
declare(strict_types=1);


namespace %NAMESPACE%;

%USES%

class %CLASS%
{
    %TRAIT%

    /**
     * @param array $params
     */
    public function list(array $params)
    {
        // 校验
        if (true !== $code = validate($params, $this->listValidate())) {
            // TODO::请更换校验异常类
            throw new %VALIDATE_EXCEPTION%($code);
        }
    }

    /**
     * @param array $params
     */
    public function add(array $params)
    {
        // 校验
        if (true !== $code = validate($params, $this->addValidate())) {
            // TODO::请更换校验异常类
            throw new %VALIDATE_EXCEPTION%($code);
        }

        // 数据入库
        Db::beginTransaction();
        try {
            // TODO::业务代码

            Db::commit();
        } catch (\Throwable $e) {
            Db::rollBack();
            throw new %BUSINESS_EXCEPTION%($e->getMessage());
        }
    }

    /**
     * @param array $params
     */
    public function edit(array $params)
    {
        // 校验
        if (true !== $code = validate($params, $this->editValidate())) {
            // TODO::请更换校验异常类
            throw new %VALIDATE_EXCEPTION%($code);
        }

        // 数据入库
        Db::beginTransaction();
        try {
            // TODO::业务代码

            Db::commit();
        } catch (\Throwable $e) {
            Db::rollBack();
            throw new %BUSINESS_EXCEPTION%($e->getMessage());
        }
    }

    /**
     * @param array $params
     */
    public function details(array $params)
    {
        // 校验
        if (true !== $code = validate($params, $this->detailsValidate())) {
            // TODO::请更换校验异常类
            throw new %VALIDATE_EXCEPTION%($code);
        }
    }

    /**
     * @param array $params
     */
    public function delete(array $params)
    {
        // 校验
        if (true !== $code = validate($params, $this->deleteValidate())) {
            // TODO::请更换校验异常类
            throw new %VALIDATE_EXCEPTION%($code);
        }

        // 数据入库
        Db::beginTransaction();
        try {
            // TODO::业务代码

            Db::commit();
        } catch (\Throwable $e) {
            Db::rollBack();
            throw new %BUSINESS_EXCEPTION%($e->getMessage());
        }
    }
}